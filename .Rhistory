geom_boxplot(color = cut)+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price, color=cut))
par(mar = c(.5,.5,.5,.5))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price, color=carat))
par(mar = c(.5,.5,.5,.5))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price, color=price))
par(mar = c(.5,.5,.5,.5))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price, color=clarity))
par(mar = c(.5,.5,.5,.5))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price))
#par(mar = c(.5,.5,.5,.5))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))+
theme(axis.text.y = element_text(face = "bold", color = "#993333"))
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color = color))
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color = color))
g <- ggplot(diamonds)
g +
geom_denisty(aes(x=carat), fill="gray50")+
geom_density(aes(x=clarity), fill="yellow")
g <- ggplot(diamonds)
g +
geom_denisty(aes(x=carat), fill="gray50")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")+
geom_density(aes(x=cut), fill="yellow")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g +
geom_density(aes(x=cut))
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g +
geom_density(aes(x=cut), fill="black")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g +
geom_density(aes(x=clarity), fill="gray")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g +
geom_density(aes(x=depth), fill="gray")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g +
geom_density(aes(x=price), fill="gray")
g <- ggplot(diamonds)
g +
geom_density(aes(x=price), fill="gray")
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library(rpart)
install.packages(rpart)
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
install.packages('rpart')
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
library('randomForest')
install.packages('randomForest')
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
library('randomForest')
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
library('randomForest')
data(diamonds)
head(diamonds)
dim(diamonds)
summary(diamonds)
unique(diamonds$clarity)
View(diamonds)
str(diamonds)
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color=clarity)) +
facet_grid(cut ~ clarity)+
theme_bw()
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))+
theme(axis.text.y = element_text(face = "bold", color = "#993333"))
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color = color))
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g <- ggplot(diamonds)
g +
geom_density(aes(x=price), fill="gray")
colnames(diamonds)
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = diamonds)
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = diamonds)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=.6)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity + depth + table, data = diamonds)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
library('randomForest')
data(diamonds)
head(diamonds)
dim(diamonds)
summary(diamonds)
unique(diamonds$clarity)
View(diamonds)
str(diamonds)
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color=clarity)) +
facet_grid(cut ~ clarity)+
theme_bw()
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))+
theme(axis.text.y = element_text(face = "bold", color = "#993333"))
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color = color))
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g <- ggplot(diamonds)
g +
geom_density(aes(x=price), fill="gray")
colnames(diamonds)
# train the tree
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = diamonds)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity + depth + table, data = diamonds)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
print("Making predictions for the following 5 diamonds")
print(head(diamonds))
print("The predictions are:")
print(predict(fit2, head(diamonds)))
print("Actual price")
print(head(diamonds$price))
print("Making predictions for the following 5 diamonds")
print(head(diamonds))
print("The predictions are:")
print(predict(fit, head(diamonds)))
print("Actual price")
print(head(diamonds$price))
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity, data = diamonds)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
print("Making predictions for the following 5 diamonds")
print(head(diamonds))
print("The predictions are:")
print(predict(fit, head(diamonds)))
print("Actual price")
print(head(diamonds$price))
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(diamonds)))
print("Actual price")
print(head(diamonds$price))
install.packages('modelr')
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
library(modelr)
library('modelr')
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library('rpart')
library('randomForest')
data(diamonds)
head(diamonds)
dim(diamonds)
dim(diamonds)
summary(diamonds)
unique(diamonds$clarity)
View(diamonds)
str(diamonds)
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color=clarity)) +
facet_grid(cut ~ clarity)+
theme_bw()
diamonds$cut = as.factor(diamonds$cut)
g <- ggplot(diamonds, aes(x=cut, y=price))
g +
geom_boxplot()+
facet_grid(~clarity)+
theme(axis.text.x = element_text(angle = 90, face = "bold", color = "#993333",
size = 9))+
theme(axis.text.y = element_text(face = "bold", color = "#993333"))
g <- ggplot(diamonds, aes(x=carat, y=price))
g +
geom_point(aes(color = color))
g <- ggplot(diamonds)
g +
geom_density(aes(x=carat), fill="gray50")
g <- ggplot(diamonds)
g +
geom_density(aes(x=price), fill="gray")
colnames(diamonds)
# train the tree
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = diamonds)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity, data = diamonds)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(diamonds)))
print("Actual price")
print(head(diamonds$price))
library('modelr')
install.packages('modelr')
library('modelr')
library(modelr)
install.packages('tidyr')
install.packages('modelr')
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(modelr)
library(modelr)
library('modelr')
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library(rpart)
library(randomForest)
library(modelr)
install.packages('modelr')
library(modelr)
library(modelr)
update(dplyr)
update('dplyr')
update.packages('dplyr')
library(modelr)
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
library(modelr)
mae(model = fit2, data=diamonds)
splitData <- resample_partition(diamonds, c(test=0.3, train=0.7))
lapply(splitData, dim)
lapply(splitData, dim)
# train the tree
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = splitData$train)
#install.packages('ggplot2')
#install.packages('GGally')
library(ggplot2)
library(GGally)
library(rpart)
library(randomForest)
library(tidyr)
library(modelr)
# train the tree
fit <- rpart(price ~ carat + cut + color + clarity + depth + table + x + y + z, data = splitData$train)
#plot the regression tree
plot(fit, uniform=TRUE)
text(fit, cex=1)
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity, data = splitData$train)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(splitData$train)))
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(splitData$train)))
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity, data = splitData$train)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(splitData$train)))
head(splitData$train)
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit, head(splitData$train)))
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit2, head(splitData$train)))
# train the tree
fit2 <- rpart(price ~ carat + cut + color + clarity, data = splitData$train)
#plot the regression tree
plot(fit2, uniform=TRUE)
text(fit2, cex=1)
head(splitData$train)
print("Making predictions for the first 5 diamonds")
print("The predictions are:")
print(predict(fit2, head(splitData$train)))
print("Making predictions for the first 5 diamonds")
print("The predictions are")
print(predict(fit2, head(splitData$train)))
print("Making predictions for the first 5 diamonds")
print("The predictions are")
print(predict(fit2, head(splitData$train)))
mae(model = fit2, data=splitData$test)
get_mae <- function(maxdepth, target, predictors, training_data, testing_data){
predictors <- paste(predictors, collapse='+')
formula <- as.formula(paste(target, "~", predictors, sep = ""))
model <- rpart(formula, data=training_data, control = rpart.control(maxdepth = maxdepth))
mae <- mae(model, testing_data)
return(mae)
}
target <- "price"
predictors <- c("carat", "cut", "color", clarity")
for (i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = prdictors,
training_data=splitData$train, testing_data=splitData$test)
print(glue::glue("Maxdepth: ",i,"\t MAE: ",mae))
target <- "price"
predictors <- c("carat", "cut", "color", clarity")
for (i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = prdictors,
training_data=splitData$train, testing_data=splitData$test)
print("Maxdepth: ",i,"\t MAE: ",mae))
target <- "price"
predictors <- c("carat", "cut", "color", clarity")
for (i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = prdictors, training_data=splitData$train, testing_data=splitData$test)
print("Maxdepth: ",i,"\t MAE: ",mae))
target <- "price"
predictors <- c("carat", "cut", "color", clarity")
for (i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = prdictors, training_data=splitData$train,     testing_data=splitData$test)
print("Maxdepth: ",i,"\t MAE: ",mae))
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
for (i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = prdictors, training_data=splitData$train,     testing_data=splitData$test)
print(glue::glue("Maxdepth: ",i,"\t MAE: ",mae))
}
#Feed in the target and predictors
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
# get the MaE for the maxdepths between 1 and 10
for(i in 1:10){
mae <= get_mae(maxdepth = i, target = target, predictors = predictors,
training_data = splitData$train, testing_data = splitData$test)
print(glue::glue("Maxdepth: ", i, "\t MAE: ", mae))
}
#Feed in the target and predictors
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
# get the MaE for the maxdepths between 1 and 10
for(i in 1:10){
mae <= get_mae(maxdepth = i, target = target, predictors = predictors,
training_data = splitData$train, testing_data = splitData$test)
print(glue::glue("Maxdepth: ",i, "\t MAE: ", mae))
}
#Feed in the target and predictors
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
# get the MaE for the maxdepths between 1 and 10
for(i in 1:4){
mae <= get_mae(maxdepth = i, target = target, predictors = predictors,
training_data = splitData$train, testing_data = splitData$test)
print(glue::glue("Maxdepth: ",i, "\t MAE: ", mae))
}
# A function to get the maximum average error for a given max depth. You should pass in
# the target as the name of the target colum and the predictors as vector where each
# item in the vector is the name of the column.
get_mae <- function(maxdepth, target, predictors, training_data, testing_data){
#turn the predictors & target into a formula to pass to rpart
predictors <- paste(predictors, collapse='+')
formula <- as.formula(paste(target, "~", predictors, sep = ""))
#build our model
model <- rpart(formula, data=training_data, control = rpart.control(maxdepth = maxdepth))
#get the mae
mae <- mae(model, testing_data)
return(mae)
}
#Feed in the target and predictors
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
# get the MaE for the maxdepths between 1 and 10
for(i in 1:10){
mae <= get_mae(maxdepth = i, target = target, predictors = predictors,
training_data = splitData$train, testing_data = splitData$test)
print(glue::glue("Maxdepth: ",i, "\t MAE: ", mae))
}
#Feed in the target and predictors
target <- "price"
predictors <- c("carat", "cut", "color", "clarity")
# get the MaE for the maxdepths between 1 and 10
for(i in 1:10){
mae <- get_mae(maxdepth = i, target = target, predictors = predictors,
training_data = splitData$train, testing_data = splitData$test)
print(glue::glue("Maxdepth: ",i, "\t MAE: ", mae))
}
fitRandomForest <- randomForest(price ~ carat + cut + color + clarity, data=splitData$train)
mae(model = fitRandomForest, data=splitData$test)
